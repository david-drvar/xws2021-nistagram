// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContentClient is the client API for Content service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentClient interface {
	//    Posts
	CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*EmptyResponseContent, error)
	GetAllPostsReduced(ctx context.Context, in *EmptyRequestContent, opts ...grpc.CallOption) (*ReducedPostArray, error)
	GetAllPosts(ctx context.Context, in *EmptyRequestContent, opts ...grpc.CallOption) (*PostArray, error)
	GetPostsForUser(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*PostArray, error)
	RemovePost(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*EmptyResponseContent, error)
	GetPostById(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Post, error)
	SearchContentByLocation(ctx context.Context, in *SearchLocationRequest, opts ...grpc.CallOption) (*PostArray, error)
	GetPostsByHashtag(ctx context.Context, in *Hashtag, opts ...grpc.CallOption) (*PostArray, error)
	GetAllHashtags(ctx context.Context, in *EmptyRequestContent, opts ...grpc.CallOption) (*Hashtags, error)
	//    Stories
	CreateStory(ctx context.Context, in *Story, opts ...grpc.CallOption) (*EmptyResponseContent, error)
	GetAllStories(ctx context.Context, in *EmptyRequestContent, opts ...grpc.CallOption) (*StoriesHome, error)
	GetStoriesForUser(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*StoriesArray, error)
	GetMyStories(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*StoriesArray, error)
	RemoveStory(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*EmptyResponseContent, error)
	GetStoryById(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Story, error)
	//    Comments
	CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*EmptyResponseContent, error)
	GetCommentsForPost(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*CommentsArray, error)
	// Likes & Dislikes
	CreateLike(ctx context.Context, in *Like, opts ...grpc.CallOption) (*EmptyResponseContent, error)
	GetLikesForPost(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*LikesArray, error)
	GetDislikesForPost(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*LikesArray, error)
	GetUserLikedOrDislikedPosts(ctx context.Context, in *Like, opts ...grpc.CallOption) (*PostArray, error)
	// Collections & Favorites
	GetAllCollections(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*CollectionsArray, error)
	GetCollection(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Collection, error)
	CreateCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*Collection, error)
	RemoveCollection(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*EmptyResponseContent, error)
	GetUserFavorites(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Favorites, error)
	// Only fetching post ids, instead of all the data
	GetUserFavoritesOptimized(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Favorites, error)
	CreateFavorite(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*EmptyResponseContent, error)
	RemoveFavorite(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*EmptyResponseContent, error)
	// Hashtags
	CreateHashtag(ctx context.Context, in *Hashtag, opts ...grpc.CallOption) (*Hashtag, error)
	//   Highlights
	GetAllHighlights(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*HighlightsArray, error)
	GetHighlight(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Highlight, error)
	CreateHighlight(ctx context.Context, in *Highlight, opts ...grpc.CallOption) (*Highlight, error)
	RemoveHighlight(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*EmptyResponseContent, error)
	CreateHighlightStory(ctx context.Context, in *HighlightRequest, opts ...grpc.CallOption) (*EmptyResponseContent, error)
	RemoveHighlightStory(ctx context.Context, in *HighlightRequest, opts ...grpc.CallOption) (*EmptyResponseContent, error)
	//   Content complaints
	CreateContentComplaint(ctx context.Context, in *ContentComplaint, opts ...grpc.CallOption) (*EmptyResponseContent, error)
	GetAllContentComplaints(ctx context.Context, in *EmptyRequestContent, opts ...grpc.CallOption) (*ContentComplaintArray, error)
	//   Ads
	GetAds(ctx context.Context, in *EmptyRequestContent, opts ...grpc.CallOption) (*AdArray, error)
	CreateAd(ctx context.Context, in *Ad, opts ...grpc.CallOption) (*EmptyResponseContent, error)
	//   Campaigns
	GetCampaigns(ctx context.Context, in *EmptyRequestContent, opts ...grpc.CallOption) (*CampaignArray, error)
	GetCampaign(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Campaign, error)
	CreateCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*EmptyResponseContent, error)
	UpdateCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*EmptyResponseContent, error)
	DeleteCampaign(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*EmptyResponseContent, error)
	//   Ad Categories
	GetAdCategories(ctx context.Context, in *EmptyRequestContent, opts ...grpc.CallOption) (*AdCategoryArray, error)
	GetAdCategory(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*AdCategory, error)
	CreateAdCategory(ctx context.Context, in *AdCategory, opts ...grpc.CallOption) (*EmptyResponseContent, error)
}

type contentClient struct {
	cc grpc.ClientConnInterface
}

func NewContentClient(cc grpc.ClientConnInterface) ContentClient {
	return &contentClient{cc}
}

func (c *contentClient) CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*EmptyResponseContent, error) {
	out := new(EmptyResponseContent)
	err := c.cc.Invoke(ctx, "/proto.Content/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetAllPostsReduced(ctx context.Context, in *EmptyRequestContent, opts ...grpc.CallOption) (*ReducedPostArray, error) {
	out := new(ReducedPostArray)
	err := c.cc.Invoke(ctx, "/proto.Content/GetAllPostsReduced", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetAllPosts(ctx context.Context, in *EmptyRequestContent, opts ...grpc.CallOption) (*PostArray, error) {
	out := new(PostArray)
	err := c.cc.Invoke(ctx, "/proto.Content/GetAllPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetPostsForUser(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*PostArray, error) {
	out := new(PostArray)
	err := c.cc.Invoke(ctx, "/proto.Content/GetPostsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) RemovePost(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*EmptyResponseContent, error) {
	out := new(EmptyResponseContent)
	err := c.cc.Invoke(ctx, "/proto.Content/RemovePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetPostById(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/proto.Content/GetPostById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) SearchContentByLocation(ctx context.Context, in *SearchLocationRequest, opts ...grpc.CallOption) (*PostArray, error) {
	out := new(PostArray)
	err := c.cc.Invoke(ctx, "/proto.Content/SearchContentByLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetPostsByHashtag(ctx context.Context, in *Hashtag, opts ...grpc.CallOption) (*PostArray, error) {
	out := new(PostArray)
	err := c.cc.Invoke(ctx, "/proto.Content/GetPostsByHashtag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetAllHashtags(ctx context.Context, in *EmptyRequestContent, opts ...grpc.CallOption) (*Hashtags, error) {
	out := new(Hashtags)
	err := c.cc.Invoke(ctx, "/proto.Content/GetAllHashtags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CreateStory(ctx context.Context, in *Story, opts ...grpc.CallOption) (*EmptyResponseContent, error) {
	out := new(EmptyResponseContent)
	err := c.cc.Invoke(ctx, "/proto.Content/CreateStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetAllStories(ctx context.Context, in *EmptyRequestContent, opts ...grpc.CallOption) (*StoriesHome, error) {
	out := new(StoriesHome)
	err := c.cc.Invoke(ctx, "/proto.Content/GetAllStories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetStoriesForUser(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*StoriesArray, error) {
	out := new(StoriesArray)
	err := c.cc.Invoke(ctx, "/proto.Content/GetStoriesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetMyStories(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*StoriesArray, error) {
	out := new(StoriesArray)
	err := c.cc.Invoke(ctx, "/proto.Content/GetMyStories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) RemoveStory(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*EmptyResponseContent, error) {
	out := new(EmptyResponseContent)
	err := c.cc.Invoke(ctx, "/proto.Content/RemoveStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetStoryById(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Story, error) {
	out := new(Story)
	err := c.cc.Invoke(ctx, "/proto.Content/GetStoryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*EmptyResponseContent, error) {
	out := new(EmptyResponseContent)
	err := c.cc.Invoke(ctx, "/proto.Content/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetCommentsForPost(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*CommentsArray, error) {
	out := new(CommentsArray)
	err := c.cc.Invoke(ctx, "/proto.Content/GetCommentsForPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CreateLike(ctx context.Context, in *Like, opts ...grpc.CallOption) (*EmptyResponseContent, error) {
	out := new(EmptyResponseContent)
	err := c.cc.Invoke(ctx, "/proto.Content/CreateLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetLikesForPost(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*LikesArray, error) {
	out := new(LikesArray)
	err := c.cc.Invoke(ctx, "/proto.Content/GetLikesForPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetDislikesForPost(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*LikesArray, error) {
	out := new(LikesArray)
	err := c.cc.Invoke(ctx, "/proto.Content/GetDislikesForPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetUserLikedOrDislikedPosts(ctx context.Context, in *Like, opts ...grpc.CallOption) (*PostArray, error) {
	out := new(PostArray)
	err := c.cc.Invoke(ctx, "/proto.Content/GetUserLikedOrDislikedPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetAllCollections(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*CollectionsArray, error) {
	out := new(CollectionsArray)
	err := c.cc.Invoke(ctx, "/proto.Content/GetAllCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetCollection(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Collection, error) {
	out := new(Collection)
	err := c.cc.Invoke(ctx, "/proto.Content/GetCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CreateCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*Collection, error) {
	out := new(Collection)
	err := c.cc.Invoke(ctx, "/proto.Content/CreateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) RemoveCollection(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*EmptyResponseContent, error) {
	out := new(EmptyResponseContent)
	err := c.cc.Invoke(ctx, "/proto.Content/RemoveCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetUserFavorites(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Favorites, error) {
	out := new(Favorites)
	err := c.cc.Invoke(ctx, "/proto.Content/GetUserFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetUserFavoritesOptimized(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Favorites, error) {
	out := new(Favorites)
	err := c.cc.Invoke(ctx, "/proto.Content/GetUserFavoritesOptimized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CreateFavorite(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*EmptyResponseContent, error) {
	out := new(EmptyResponseContent)
	err := c.cc.Invoke(ctx, "/proto.Content/CreateFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) RemoveFavorite(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*EmptyResponseContent, error) {
	out := new(EmptyResponseContent)
	err := c.cc.Invoke(ctx, "/proto.Content/RemoveFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CreateHashtag(ctx context.Context, in *Hashtag, opts ...grpc.CallOption) (*Hashtag, error) {
	out := new(Hashtag)
	err := c.cc.Invoke(ctx, "/proto.Content/CreateHashtag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetAllHighlights(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*HighlightsArray, error) {
	out := new(HighlightsArray)
	err := c.cc.Invoke(ctx, "/proto.Content/GetAllHighlights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetHighlight(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Highlight, error) {
	out := new(Highlight)
	err := c.cc.Invoke(ctx, "/proto.Content/GetHighlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CreateHighlight(ctx context.Context, in *Highlight, opts ...grpc.CallOption) (*Highlight, error) {
	out := new(Highlight)
	err := c.cc.Invoke(ctx, "/proto.Content/CreateHighlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) RemoveHighlight(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*EmptyResponseContent, error) {
	out := new(EmptyResponseContent)
	err := c.cc.Invoke(ctx, "/proto.Content/RemoveHighlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CreateHighlightStory(ctx context.Context, in *HighlightRequest, opts ...grpc.CallOption) (*EmptyResponseContent, error) {
	out := new(EmptyResponseContent)
	err := c.cc.Invoke(ctx, "/proto.Content/CreateHighlightStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) RemoveHighlightStory(ctx context.Context, in *HighlightRequest, opts ...grpc.CallOption) (*EmptyResponseContent, error) {
	out := new(EmptyResponseContent)
	err := c.cc.Invoke(ctx, "/proto.Content/RemoveHighlightStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CreateContentComplaint(ctx context.Context, in *ContentComplaint, opts ...grpc.CallOption) (*EmptyResponseContent, error) {
	out := new(EmptyResponseContent)
	err := c.cc.Invoke(ctx, "/proto.Content/CreateContentComplaint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetAllContentComplaints(ctx context.Context, in *EmptyRequestContent, opts ...grpc.CallOption) (*ContentComplaintArray, error) {
	out := new(ContentComplaintArray)
	err := c.cc.Invoke(ctx, "/proto.Content/GetAllContentComplaints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetAds(ctx context.Context, in *EmptyRequestContent, opts ...grpc.CallOption) (*AdArray, error) {
	out := new(AdArray)
	err := c.cc.Invoke(ctx, "/proto.Content/GetAds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CreateAd(ctx context.Context, in *Ad, opts ...grpc.CallOption) (*EmptyResponseContent, error) {
	out := new(EmptyResponseContent)
	err := c.cc.Invoke(ctx, "/proto.Content/CreateAd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetCampaigns(ctx context.Context, in *EmptyRequestContent, opts ...grpc.CallOption) (*CampaignArray, error) {
	out := new(CampaignArray)
	err := c.cc.Invoke(ctx, "/proto.Content/GetCampaigns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetCampaign(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Campaign, error) {
	out := new(Campaign)
	err := c.cc.Invoke(ctx, "/proto.Content/GetCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CreateCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*EmptyResponseContent, error) {
	out := new(EmptyResponseContent)
	err := c.cc.Invoke(ctx, "/proto.Content/CreateCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) UpdateCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*EmptyResponseContent, error) {
	out := new(EmptyResponseContent)
	err := c.cc.Invoke(ctx, "/proto.Content/UpdateCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) DeleteCampaign(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*EmptyResponseContent, error) {
	out := new(EmptyResponseContent)
	err := c.cc.Invoke(ctx, "/proto.Content/DeleteCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetAdCategories(ctx context.Context, in *EmptyRequestContent, opts ...grpc.CallOption) (*AdCategoryArray, error) {
	out := new(AdCategoryArray)
	err := c.cc.Invoke(ctx, "/proto.Content/GetAdCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetAdCategory(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*AdCategory, error) {
	out := new(AdCategory)
	err := c.cc.Invoke(ctx, "/proto.Content/GetAdCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CreateAdCategory(ctx context.Context, in *AdCategory, opts ...grpc.CallOption) (*EmptyResponseContent, error) {
	out := new(EmptyResponseContent)
	err := c.cc.Invoke(ctx, "/proto.Content/CreateAdCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServer is the server API for Content service.
// All implementations must embed UnimplementedContentServer
// for forward compatibility
type ContentServer interface {
	//    Posts
	CreatePost(context.Context, *Post) (*EmptyResponseContent, error)
	GetAllPostsReduced(context.Context, *EmptyRequestContent) (*ReducedPostArray, error)
	GetAllPosts(context.Context, *EmptyRequestContent) (*PostArray, error)
	GetPostsForUser(context.Context, *RequestId) (*PostArray, error)
	RemovePost(context.Context, *RequestId) (*EmptyResponseContent, error)
	GetPostById(context.Context, *RequestId) (*Post, error)
	SearchContentByLocation(context.Context, *SearchLocationRequest) (*PostArray, error)
	GetPostsByHashtag(context.Context, *Hashtag) (*PostArray, error)
	GetAllHashtags(context.Context, *EmptyRequestContent) (*Hashtags, error)
	//    Stories
	CreateStory(context.Context, *Story) (*EmptyResponseContent, error)
	GetAllStories(context.Context, *EmptyRequestContent) (*StoriesHome, error)
	GetStoriesForUser(context.Context, *RequestId) (*StoriesArray, error)
	GetMyStories(context.Context, *RequestId) (*StoriesArray, error)
	RemoveStory(context.Context, *RequestId) (*EmptyResponseContent, error)
	GetStoryById(context.Context, *RequestId) (*Story, error)
	//    Comments
	CreateComment(context.Context, *Comment) (*EmptyResponseContent, error)
	GetCommentsForPost(context.Context, *RequestId) (*CommentsArray, error)
	// Likes & Dislikes
	CreateLike(context.Context, *Like) (*EmptyResponseContent, error)
	GetLikesForPost(context.Context, *RequestId) (*LikesArray, error)
	GetDislikesForPost(context.Context, *RequestId) (*LikesArray, error)
	GetUserLikedOrDislikedPosts(context.Context, *Like) (*PostArray, error)
	// Collections & Favorites
	GetAllCollections(context.Context, *RequestId) (*CollectionsArray, error)
	GetCollection(context.Context, *RequestId) (*Collection, error)
	CreateCollection(context.Context, *Collection) (*Collection, error)
	RemoveCollection(context.Context, *RequestId) (*EmptyResponseContent, error)
	GetUserFavorites(context.Context, *RequestId) (*Favorites, error)
	// Only fetching post ids, instead of all the data
	GetUserFavoritesOptimized(context.Context, *RequestId) (*Favorites, error)
	CreateFavorite(context.Context, *FavoritesRequest) (*EmptyResponseContent, error)
	RemoveFavorite(context.Context, *FavoritesRequest) (*EmptyResponseContent, error)
	// Hashtags
	CreateHashtag(context.Context, *Hashtag) (*Hashtag, error)
	//   Highlights
	GetAllHighlights(context.Context, *RequestId) (*HighlightsArray, error)
	GetHighlight(context.Context, *RequestId) (*Highlight, error)
	CreateHighlight(context.Context, *Highlight) (*Highlight, error)
	RemoveHighlight(context.Context, *RequestId) (*EmptyResponseContent, error)
	CreateHighlightStory(context.Context, *HighlightRequest) (*EmptyResponseContent, error)
	RemoveHighlightStory(context.Context, *HighlightRequest) (*EmptyResponseContent, error)
	//   Content complaints
	CreateContentComplaint(context.Context, *ContentComplaint) (*EmptyResponseContent, error)
	GetAllContentComplaints(context.Context, *EmptyRequestContent) (*ContentComplaintArray, error)
	//   Ads
	GetAds(context.Context, *EmptyRequestContent) (*AdArray, error)
	CreateAd(context.Context, *Ad) (*EmptyResponseContent, error)
	//   Campaigns
	GetCampaigns(context.Context, *EmptyRequestContent) (*CampaignArray, error)
	GetCampaign(context.Context, *RequestId) (*Campaign, error)
	CreateCampaign(context.Context, *Campaign) (*EmptyResponseContent, error)
	UpdateCampaign(context.Context, *Campaign) (*EmptyResponseContent, error)
	DeleteCampaign(context.Context, *RequestId) (*EmptyResponseContent, error)
	//   Ad Categories
	GetAdCategories(context.Context, *EmptyRequestContent) (*AdCategoryArray, error)
	GetAdCategory(context.Context, *RequestId) (*AdCategory, error)
	CreateAdCategory(context.Context, *AdCategory) (*EmptyResponseContent, error)
	mustEmbedUnimplementedContentServer()
}

// UnimplementedContentServer must be embedded to have forward compatible implementations.
type UnimplementedContentServer struct {
}

func (UnimplementedContentServer) CreatePost(context.Context, *Post) (*EmptyResponseContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedContentServer) GetAllPostsReduced(context.Context, *EmptyRequestContent) (*ReducedPostArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPostsReduced not implemented")
}
func (UnimplementedContentServer) GetAllPosts(context.Context, *EmptyRequestContent) (*PostArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPosts not implemented")
}
func (UnimplementedContentServer) GetPostsForUser(context.Context, *RequestId) (*PostArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostsForUser not implemented")
}
func (UnimplementedContentServer) RemovePost(context.Context, *RequestId) (*EmptyResponseContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePost not implemented")
}
func (UnimplementedContentServer) GetPostById(context.Context, *RequestId) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostById not implemented")
}
func (UnimplementedContentServer) SearchContentByLocation(context.Context, *SearchLocationRequest) (*PostArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchContentByLocation not implemented")
}
func (UnimplementedContentServer) GetPostsByHashtag(context.Context, *Hashtag) (*PostArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostsByHashtag not implemented")
}
func (UnimplementedContentServer) GetAllHashtags(context.Context, *EmptyRequestContent) (*Hashtags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllHashtags not implemented")
}
func (UnimplementedContentServer) CreateStory(context.Context, *Story) (*EmptyResponseContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStory not implemented")
}
func (UnimplementedContentServer) GetAllStories(context.Context, *EmptyRequestContent) (*StoriesHome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStories not implemented")
}
func (UnimplementedContentServer) GetStoriesForUser(context.Context, *RequestId) (*StoriesArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoriesForUser not implemented")
}
func (UnimplementedContentServer) GetMyStories(context.Context, *RequestId) (*StoriesArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyStories not implemented")
}
func (UnimplementedContentServer) RemoveStory(context.Context, *RequestId) (*EmptyResponseContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStory not implemented")
}
func (UnimplementedContentServer) GetStoryById(context.Context, *RequestId) (*Story, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryById not implemented")
}
func (UnimplementedContentServer) CreateComment(context.Context, *Comment) (*EmptyResponseContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedContentServer) GetCommentsForPost(context.Context, *RequestId) (*CommentsArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsForPost not implemented")
}
func (UnimplementedContentServer) CreateLike(context.Context, *Like) (*EmptyResponseContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLike not implemented")
}
func (UnimplementedContentServer) GetLikesForPost(context.Context, *RequestId) (*LikesArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikesForPost not implemented")
}
func (UnimplementedContentServer) GetDislikesForPost(context.Context, *RequestId) (*LikesArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDislikesForPost not implemented")
}
func (UnimplementedContentServer) GetUserLikedOrDislikedPosts(context.Context, *Like) (*PostArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLikedOrDislikedPosts not implemented")
}
func (UnimplementedContentServer) GetAllCollections(context.Context, *RequestId) (*CollectionsArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCollections not implemented")
}
func (UnimplementedContentServer) GetCollection(context.Context, *RequestId) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (UnimplementedContentServer) CreateCollection(context.Context, *Collection) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedContentServer) RemoveCollection(context.Context, *RequestId) (*EmptyResponseContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCollection not implemented")
}
func (UnimplementedContentServer) GetUserFavorites(context.Context, *RequestId) (*Favorites, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFavorites not implemented")
}
func (UnimplementedContentServer) GetUserFavoritesOptimized(context.Context, *RequestId) (*Favorites, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFavoritesOptimized not implemented")
}
func (UnimplementedContentServer) CreateFavorite(context.Context, *FavoritesRequest) (*EmptyResponseContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFavorite not implemented")
}
func (UnimplementedContentServer) RemoveFavorite(context.Context, *FavoritesRequest) (*EmptyResponseContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFavorite not implemented")
}
func (UnimplementedContentServer) CreateHashtag(context.Context, *Hashtag) (*Hashtag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHashtag not implemented")
}
func (UnimplementedContentServer) GetAllHighlights(context.Context, *RequestId) (*HighlightsArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllHighlights not implemented")
}
func (UnimplementedContentServer) GetHighlight(context.Context, *RequestId) (*Highlight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHighlight not implemented")
}
func (UnimplementedContentServer) CreateHighlight(context.Context, *Highlight) (*Highlight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHighlight not implemented")
}
func (UnimplementedContentServer) RemoveHighlight(context.Context, *RequestId) (*EmptyResponseContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHighlight not implemented")
}
func (UnimplementedContentServer) CreateHighlightStory(context.Context, *HighlightRequest) (*EmptyResponseContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHighlightStory not implemented")
}
func (UnimplementedContentServer) RemoveHighlightStory(context.Context, *HighlightRequest) (*EmptyResponseContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHighlightStory not implemented")
}
func (UnimplementedContentServer) CreateContentComplaint(context.Context, *ContentComplaint) (*EmptyResponseContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContentComplaint not implemented")
}
func (UnimplementedContentServer) GetAllContentComplaints(context.Context, *EmptyRequestContent) (*ContentComplaintArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllContentComplaints not implemented")
}
func (UnimplementedContentServer) GetAds(context.Context, *EmptyRequestContent) (*AdArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAds not implemented")
}
func (UnimplementedContentServer) CreateAd(context.Context, *Ad) (*EmptyResponseContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAd not implemented")
}
func (UnimplementedContentServer) GetCampaigns(context.Context, *EmptyRequestContent) (*CampaignArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaigns not implemented")
}
func (UnimplementedContentServer) GetCampaign(context.Context, *RequestId) (*Campaign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaign not implemented")
}
func (UnimplementedContentServer) CreateCampaign(context.Context, *Campaign) (*EmptyResponseContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampaign not implemented")
}
func (UnimplementedContentServer) UpdateCampaign(context.Context, *Campaign) (*EmptyResponseContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCampaign not implemented")
}
func (UnimplementedContentServer) DeleteCampaign(context.Context, *RequestId) (*EmptyResponseContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCampaign not implemented")
}
func (UnimplementedContentServer) GetAdCategories(context.Context, *EmptyRequestContent) (*AdCategoryArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdCategories not implemented")
}
func (UnimplementedContentServer) GetAdCategory(context.Context, *RequestId) (*AdCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdCategory not implemented")
}
func (UnimplementedContentServer) CreateAdCategory(context.Context, *AdCategory) (*EmptyResponseContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdCategory not implemented")
}
func (UnimplementedContentServer) mustEmbedUnimplementedContentServer() {}

// UnsafeContentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServer will
// result in compilation errors.
type UnsafeContentServer interface {
	mustEmbedUnimplementedContentServer()
}

func RegisterContentServer(s grpc.ServiceRegistrar, srv ContentServer) {
	s.RegisterService(&Content_ServiceDesc, srv)
}

func _Content_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetAllPostsReduced_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequestContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetAllPostsReduced(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetAllPostsReduced",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetAllPostsReduced(ctx, req.(*EmptyRequestContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetAllPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequestContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetAllPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetAllPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetAllPosts(ctx, req.(*EmptyRequestContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetPostsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetPostsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetPostsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetPostsForUser(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_RemovePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).RemovePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/RemovePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).RemovePost(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetPostById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetPostById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetPostById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetPostById(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_SearchContentByLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).SearchContentByLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/SearchContentByLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).SearchContentByLocation(ctx, req.(*SearchLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetPostsByHashtag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hashtag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetPostsByHashtag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetPostsByHashtag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetPostsByHashtag(ctx, req.(*Hashtag))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetAllHashtags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequestContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetAllHashtags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetAllHashtags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetAllHashtags(ctx, req.(*EmptyRequestContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CreateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Story)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/CreateStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateStory(ctx, req.(*Story))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetAllStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequestContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetAllStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetAllStories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetAllStories(ctx, req.(*EmptyRequestContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetStoriesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetStoriesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetStoriesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetStoriesForUser(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetMyStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetMyStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetMyStories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetMyStories(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_RemoveStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).RemoveStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/RemoveStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).RemoveStory(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetStoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetStoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetStoryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetStoryById(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetCommentsForPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetCommentsForPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetCommentsForPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetCommentsForPost(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CreateLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Like)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/CreateLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateLike(ctx, req.(*Like))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetLikesForPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetLikesForPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetLikesForPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetLikesForPost(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetDislikesForPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetDislikesForPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetDislikesForPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetDislikesForPost(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetUserLikedOrDislikedPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Like)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetUserLikedOrDislikedPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetUserLikedOrDislikedPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetUserLikedOrDislikedPosts(ctx, req.(*Like))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetAllCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetAllCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetAllCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetAllCollections(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetCollection(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateCollection(ctx, req.(*Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_RemoveCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).RemoveCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/RemoveCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).RemoveCollection(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetUserFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetUserFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetUserFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetUserFavorites(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetUserFavoritesOptimized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetUserFavoritesOptimized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetUserFavoritesOptimized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetUserFavoritesOptimized(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CreateFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/CreateFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateFavorite(ctx, req.(*FavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_RemoveFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).RemoveFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/RemoveFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).RemoveFavorite(ctx, req.(*FavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CreateHashtag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hashtag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateHashtag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/CreateHashtag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateHashtag(ctx, req.(*Hashtag))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetAllHighlights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetAllHighlights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetAllHighlights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetAllHighlights(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetHighlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetHighlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetHighlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetHighlight(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CreateHighlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Highlight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateHighlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/CreateHighlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateHighlight(ctx, req.(*Highlight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_RemoveHighlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).RemoveHighlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/RemoveHighlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).RemoveHighlight(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CreateHighlightStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HighlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateHighlightStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/CreateHighlightStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateHighlightStory(ctx, req.(*HighlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_RemoveHighlightStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HighlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).RemoveHighlightStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/RemoveHighlightStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).RemoveHighlightStory(ctx, req.(*HighlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CreateContentComplaint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentComplaint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateContentComplaint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/CreateContentComplaint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateContentComplaint(ctx, req.(*ContentComplaint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetAllContentComplaints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequestContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetAllContentComplaints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetAllContentComplaints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetAllContentComplaints(ctx, req.(*EmptyRequestContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetAds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequestContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetAds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetAds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetAds(ctx, req.(*EmptyRequestContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CreateAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ad)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/CreateAd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateAd(ctx, req.(*Ad))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequestContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetCampaigns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetCampaigns(ctx, req.(*EmptyRequestContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetCampaign(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CreateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Campaign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/CreateCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateCampaign(ctx, req.(*Campaign))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_UpdateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Campaign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).UpdateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/UpdateCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).UpdateCampaign(ctx, req.(*Campaign))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_DeleteCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).DeleteCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/DeleteCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).DeleteCampaign(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetAdCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequestContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetAdCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetAdCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetAdCategories(ctx, req.(*EmptyRequestContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetAdCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetAdCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/GetAdCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetAdCategory(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CreateAdCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateAdCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Content/CreateAdCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateAdCategory(ctx, req.(*AdCategory))
	}
	return interceptor(ctx, in, info, handler)
}

// Content_ServiceDesc is the grpc.ServiceDesc for Content service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Content_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Content",
	HandlerType: (*ContentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _Content_CreatePost_Handler,
		},
		{
			MethodName: "GetAllPostsReduced",
			Handler:    _Content_GetAllPostsReduced_Handler,
		},
		{
			MethodName: "GetAllPosts",
			Handler:    _Content_GetAllPosts_Handler,
		},
		{
			MethodName: "GetPostsForUser",
			Handler:    _Content_GetPostsForUser_Handler,
		},
		{
			MethodName: "RemovePost",
			Handler:    _Content_RemovePost_Handler,
		},
		{
			MethodName: "GetPostById",
			Handler:    _Content_GetPostById_Handler,
		},
		{
			MethodName: "SearchContentByLocation",
			Handler:    _Content_SearchContentByLocation_Handler,
		},
		{
			MethodName: "GetPostsByHashtag",
			Handler:    _Content_GetPostsByHashtag_Handler,
		},
		{
			MethodName: "GetAllHashtags",
			Handler:    _Content_GetAllHashtags_Handler,
		},
		{
			MethodName: "CreateStory",
			Handler:    _Content_CreateStory_Handler,
		},
		{
			MethodName: "GetAllStories",
			Handler:    _Content_GetAllStories_Handler,
		},
		{
			MethodName: "GetStoriesForUser",
			Handler:    _Content_GetStoriesForUser_Handler,
		},
		{
			MethodName: "GetMyStories",
			Handler:    _Content_GetMyStories_Handler,
		},
		{
			MethodName: "RemoveStory",
			Handler:    _Content_RemoveStory_Handler,
		},
		{
			MethodName: "GetStoryById",
			Handler:    _Content_GetStoryById_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _Content_CreateComment_Handler,
		},
		{
			MethodName: "GetCommentsForPost",
			Handler:    _Content_GetCommentsForPost_Handler,
		},
		{
			MethodName: "CreateLike",
			Handler:    _Content_CreateLike_Handler,
		},
		{
			MethodName: "GetLikesForPost",
			Handler:    _Content_GetLikesForPost_Handler,
		},
		{
			MethodName: "GetDislikesForPost",
			Handler:    _Content_GetDislikesForPost_Handler,
		},
		{
			MethodName: "GetUserLikedOrDislikedPosts",
			Handler:    _Content_GetUserLikedOrDislikedPosts_Handler,
		},
		{
			MethodName: "GetAllCollections",
			Handler:    _Content_GetAllCollections_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _Content_GetCollection_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _Content_CreateCollection_Handler,
		},
		{
			MethodName: "RemoveCollection",
			Handler:    _Content_RemoveCollection_Handler,
		},
		{
			MethodName: "GetUserFavorites",
			Handler:    _Content_GetUserFavorites_Handler,
		},
		{
			MethodName: "GetUserFavoritesOptimized",
			Handler:    _Content_GetUserFavoritesOptimized_Handler,
		},
		{
			MethodName: "CreateFavorite",
			Handler:    _Content_CreateFavorite_Handler,
		},
		{
			MethodName: "RemoveFavorite",
			Handler:    _Content_RemoveFavorite_Handler,
		},
		{
			MethodName: "CreateHashtag",
			Handler:    _Content_CreateHashtag_Handler,
		},
		{
			MethodName: "GetAllHighlights",
			Handler:    _Content_GetAllHighlights_Handler,
		},
		{
			MethodName: "GetHighlight",
			Handler:    _Content_GetHighlight_Handler,
		},
		{
			MethodName: "CreateHighlight",
			Handler:    _Content_CreateHighlight_Handler,
		},
		{
			MethodName: "RemoveHighlight",
			Handler:    _Content_RemoveHighlight_Handler,
		},
		{
			MethodName: "CreateHighlightStory",
			Handler:    _Content_CreateHighlightStory_Handler,
		},
		{
			MethodName: "RemoveHighlightStory",
			Handler:    _Content_RemoveHighlightStory_Handler,
		},
		{
			MethodName: "CreateContentComplaint",
			Handler:    _Content_CreateContentComplaint_Handler,
		},
		{
			MethodName: "GetAllContentComplaints",
			Handler:    _Content_GetAllContentComplaints_Handler,
		},
		{
			MethodName: "GetAds",
			Handler:    _Content_GetAds_Handler,
		},
		{
			MethodName: "CreateAd",
			Handler:    _Content_CreateAd_Handler,
		},
		{
			MethodName: "GetCampaigns",
			Handler:    _Content_GetCampaigns_Handler,
		},
		{
			MethodName: "GetCampaign",
			Handler:    _Content_GetCampaign_Handler,
		},
		{
			MethodName: "CreateCampaign",
			Handler:    _Content_CreateCampaign_Handler,
		},
		{
			MethodName: "UpdateCampaign",
			Handler:    _Content_UpdateCampaign_Handler,
		},
		{
			MethodName: "DeleteCampaign",
			Handler:    _Content_DeleteCampaign_Handler,
		},
		{
			MethodName: "GetAdCategories",
			Handler:    _Content_GetAdCategories_Handler,
		},
		{
			MethodName: "GetAdCategory",
			Handler:    _Content_GetAdCategory_Handler,
		},
		{
			MethodName: "CreateAdCategory",
			Handler:    _Content_CreateAdCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content.proto",
}
